#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

bool prime(int n) {
	if (n < 2)
		return false;
	if (n == 2)
		return true;
	if (n % 2 == 0)
		return false;
	for (int i = 3; i < sqrt(n) + 1; i += 2)
		if (n % i == 0)
			return false;
	return true;
}

int get(vector<int>& m) {
	int i, res = 1;
	for (i = m.size() - 1; i >= 0; i--)
		res *= (m[i] + 1);
	return res;
}

int main()
{
	int n, i, a, counter;
	vector<int> res;
	res.push_back(2);
	for (i = 3; i < 10001; i += 2)
		if (prime(i))
			res.push_back(i);
	while (cin >> n && n) {
		for (; n > 0; n--) {
			cin >> a;
			if (a == 1)
				cout << 1 << endl;
			else {
				if (prime(a))
					cout << 2 << endl;
				else {
					vector<int> m;
					for (i = 0; res[i] <= a; i++) {
						if (a % res[i] == 0) {
							counter = 0;
							while (a % res[i] == 0) {
								counter++;
								a /= res[i];
							}
							m.push_back(counter);
						}
					}
					cout << get(m) << endl;
				}
			}
		}
	}
	return 0;
}


#include<stdio.h>  
#include<stdlib.h>  
#include<string.h>  
#include<math.h>  
int main()  
{  
    int n;  
    while(scanf("%d",&n) != EOF && n != 0)  
    {  
        int Num[1000];  
        int count[1000] = {0};  
        for(int i = 0;i < n;i++)  
            scanf("%d",&Num[i]);  
        for(int i = 0;i < n;i++)  
        {  
            int j;  
            for(j=1; j<=sqrt(Num[i]); j++)  
            {  
                int t=Num[i]%j;  
                int k=j*j;  
                if(t==0&&k!=Num[i])  
                    count[i]+=2;//约数成对出现   
                else if(t==0&&k==Num[i])  
                    count[i]++;  
            }  
        }  
          
        for(int i=0; i<n; i++)  
            printf("%d\n",count[i]);  
    }  
    return 0;  
} 