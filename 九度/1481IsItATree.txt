#include<stdio.h>  
#include<iostream>  
#include<vector>  
#include<string.h>  
#include<queue>  
#include<set>  
using namespace std;  
vector<int>G[100005];  
vector<int>::iterator ite;  
queue<int>q;  
set<int>s;  
int fr,to;  
int maxn;  
int cases;  
int n;  
  
bool vis[100005];  
int degree[100005];  
bool isTree()  
{  
    while(!q.empty())  
        q.pop();  
    for(int i = 1;i<=maxn;i++)  
    {  
        if(vis[i])  
        {  
            if(degree[i]==0)  
                q.push(i);  
            else if(degree[i]>1)  
                return false;  
        }  
    }  
    if(q.size()>1)  
        return false;  
    int cnt = 0;  
    while(!q.empty())  
    {  
        int tmp = q.front();  
        q.pop();  
        cnt++;  
        for(ite = G[tmp].begin();ite!=G[tmp].end();ite++)  
        {  
            degree[*ite]--;  
            if(degree[*ite]==0)  
                q.push(*ite);  
        }  
    }  
    if(cnt==n)  
        return true;  
    else  
        return false;  
  
}  
int main()  
{  
    cases = 0;  
    while(~scanf("%d%d",&fr,&to))  
    {  
        if(fr == -1&&to==-1)  
            break;  
        if(fr!=0&&to!=0)  
        {  
            maxn =max(maxn,fr);  
            maxn =max(maxn,to);  
            //if(!G[to].find(fr))  
            G[fr].push_back(to);  
            degree[to]++;  
            if(!vis[fr])  
            {  
                vis[fr] = 1;  
                n++;  
            }  
            if(!vis[to])  
            {  
                vis[to] = 1;  
                n++;  
            }  
  
        }  
        else if(fr==0&&to==0)  
        {  
            cases++;  
            int flag = 1;  
            int rot = 0;  
          //  n=s.size();  
//            for(int i = 1 ; i <=maxn;i++)  
//            {  
//                if(vis[i]==1)  
//                {  
//                    degree[i] = G[i].size();  
//                   // cout<<i<<endl;  
//                    if(G[i].size()>1)  
//                        flag = 0;  
//                    else if(G[i].size()==0)  
//                    {  
//  
//                        if(rot)  
//                            flag = 0;  
//                        else  
//                            rot = 1;  
//                    }  
//                }  
//  
//  
//            }  
               // cout<<flag<<" "<<rot<<endl;  
            if(isTree())  
                cout<<"Case "<<cases<<" is a tree."<<endl;  
            else  
                cout<<"Case "<<cases<<" is not a tree."<<endl;  
  
            for(int i = 1 ; i <=maxn;i++)  
            {  
                degree[i] = 0;  
                G[i].clear();  
            }  
            memset(vis,0,sizeof(vis));  
            n = 0;  
        }  
  
    }  
    return 0;  
}  

// lee.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

const int N = 10001;
int con[N];

void init() {
    for (int i=1; i<N; i++) con[i] = -1;
}

int min(int a, int b) {return (a<b?a:b);}
int max(int a, int b) {return (a>b?a:b);}

void show(int x, int y) {
    cout<<x<<"-"<<y<<": ";
    for (; x<=y; x++) cout<<con[x]<<" ";
    cout<<endl;
}

int main() {
    init();
    int x, y, tag;//x-min, y-max
    int a, b, s = 1;
    while (cin>>a>>b &&(a != -1 || b!=-1)) {
        tag = 0;
        x = min(a, b);
        y = max(a, b);
        vector<int> ans;
        while (a && b) {
            if (con[a] == -1) con[a] = 0;
            if (con[b] == -1) con[b] = 1;
            else {
                con[b] ++;
                if (con[b] > 1) tag++;
            }
            x = min(x, a);
            x = min(x, b);
            y = max(y, a);
            y = max(y, b);
            cin>>a>>b;
        }
        //show(x, y);//test
        for (a = 0; x<=y; x++) {
            if (con[x] == 0) a++;
            con[x] = -1;
        }
        if (a != 1) tag++;
        cout<<"Case "<<s<<" is";
        if (tag) cout<<" not";
        cout<<" a tree."<<endl;
        s++;
    }
    return 0;
}