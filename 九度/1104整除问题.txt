#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef struct num {
	int data;
	int total;
	int counter;
	int res;
	num(int d) : data(d), total(0), counter(0) {}
	void addT() { total++; }
	void addC() { counter++; }
	void getR() { res = counter / total; }
};

bool prime(int n) {
	if (n < 2)
		return false;
	if (n == 2)
		return true;
	if (n % 2 == 0)
		return false;
	for (int i = 3; i < sqrt(n) + 1; i += 2)
		if (n % i == 0)
			return false;
	return true;
}

int step(int n, int a) {
	int res = 0;
	if (n < a)
		return res;
	while (n % a == 0) {
		res++;
		n /= a;
	}
	return res;
}

int get(int n, vector<num>& m) {
	int res = 1001;//set the big value
	int i, j, tmp, len = m.size();
	for (i = 2; i <= n; i++) {
		tmp = i;
		for (j = 0; j < len; j++) {
			while (tmp % m[j].data == 0) {
				m[j].addC();
				tmp /= m[j].data;
			}
		} 
	}
	for (j = 0; j < len; j++) {
		m[j].getR();
		res = (res > m[j].res ? m[j].res : res);
	}
	return res;
}

int main()
{
	int n, a, i, j, tmp;
	vector<int> res;
	res.push_back(2);
	for (i = 3; i < 1001; i += 2)
		if (prime(i))
			res.push_back(i);
	while (cin >> n >> a) {
		vector<num> m;
		tmp = a;
		for (i = 0, j = 0; res[i] <= tmp; i++) {
			if (tmp % res[i] == 0) {
				m.push_back(num(res[i]));
				while (tmp % res[i] == 0) {
					m[j].addT();
					tmp /= res[i];
				}
				j++;
			}
		}
		cout << get(n, m) << endl;
	}
	return 0;
}