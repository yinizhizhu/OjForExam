#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <cmath>

using namespace std;

class quad {
public:
	float a, b, c;
	float delta, x1, x2;
	quad() { a = b = c = 0; }
	void seta(int n) { a = n; }
	void setb(int n) { b = n; }
	void setc(int n) { c = n; }
	quad& operator-=(const quad& s) {
		a -= s.a;
		b -= s.b;
		c -= s.c;
		return *this;
	}
	void getDelta() {
		delta = b*b - 4 * a*c;
	}
	void getX() {
		x1 = (-b + sqrt(delta)) / (2 * a);
		x2 = (-b - sqrt(delta)) / (2 * a);
	}
	void show() {
		getDelta();
		if (delta < 0)
			printf("No Solution\n");
		else {
			getX();
			if (x1 > x2)
				printf("%.2f %.2f", x2, x1);
			else
				printf("%.2f %.2f", x1, x2);
		}
	}
};

void show(string&e, int head, int tail) {
	for (; head <= tail; head++) cout << e[head];
	cout << endl;
}

int value(string& e, int head, int tail) {
	//show(e, head, tail);//
	if (head == tail) return 1;
	int flag = 1, ans = 0;//positive
	if (e[head] == '+') {
		if (head + 1 == tail)
			return 1;
	}
	else if (e[head] == '-') {
		flag = -1; //negative
		if (head + 1 == tail)
			return -1;
	}
	else
		ans = e[head] - '0';
	for (++head; head < tail; head++) {
		ans *= 10;
		ans += e[head] - '0';
	}
	return ans*flag;
}

int getOne(quad& ans, string& e, int head) {
	int i, j, len = e.size();
	for (i = head; i < len;) {
		for (j = i; j < len; j++) {
			if (e[j] >= '0' && e[j] <= '9') continue;
			if (e[j] == '-' || e[j] == '+') continue;
			break;
		}
		if (e[j] == 'x') {
			if (j + 1 < len &&e[j + 1] == '^') {
				ans.seta(value(e, i, j));
				i = j + 3;
			}
			else {
				ans.setb(value(e, i, j));
				i = j + 1;
			}
		}
		else if (e[j] == '=') {
			i = j + 1;
			break;
		}
		else {
			if (j + 1 < len && e[j + 1] != 'x')
				ans.setc(value(e, i, j));
			if (j == len)
				ans.setc(value(e, i, j));
			i = j + 1;
		}
	}
	return i;
}

void calculator(string& e) {
	int head = 0;
	quad ans;
	head = getOne(ans, e, head);
	//ans.show();
	quad second;
	getOne(second, e, head);
	//second.show();s
	ans -= second;
	ans.show();
}

int main() {
	string equation;
	while (cin >> equation)
		calculator(equation);
	return 0;
}

#include <iostream>  
#include <string>
#include <iomanip>  
#include <math.h>  
#include <ctype.h>  
using namespace std;

void operate(string str, int &A, int &B, int &C){
	for (int i = 0; i<str.length(); i++){
		if (str[i] == '+')
			continue;
		else if (str[i] == '-'){
			//不处理   
		}
		else if (str[i] == 'x'){    //系数为正负1的情况   
			if (i + 1 < str.length() && str[i + 1] == '^'){
				if (i - 1 >= 0 && str[i - 1] == '-')
					A = A - 1;
				else
					A += 1;
				i = i + 3;
			}
			else{
				if (i - 1 >= 0 && str[i - 1] == '-')
					B = B - 1;
				else
					B += 1;
				i = i + 1;
			}
		}
		else{
			int temp = 0;
			int j = i;
			while (isdigit(str[i])){
				temp = temp * 10 + str[i] - '0';
				i++;
			}
			if (j - 1 >= 0 && str[j - 1] == '-')
				temp = 0 - temp;
			if (i< str.length() && str[i] == 'x'){
				if (i + 1 < str.length() && str[i + 1] == '^'){
					A += temp;
					i = i + 3;
				}
				else{
					B += temp;
					i = i + 1;
				}
			}
			else
				C += temp;
		}

	}
}

int main(){
	string str;
	while (cin >> str){
		int j = 0;
		for (int i = 0; i<str.length(); i++){
			if (str[i] == '=')
				j = i;
		}
		string str_left, str_right;
		str_left = str.substr(0, j);
		str_right = str.substr(j + 1);
		int A1 = 0, B1 = 0, C1 = 0;
		int A2 = 0, B2 = 0, C2 = 0;
		operate(str_left, A1, B1, C1);
		operate(str_right, A2, B2, C2);
		int a = A1 - A2;
		int b = B1 - B2;
		int c = C1 - C2;   //化方程为标准式,a,b,c为系数  
		int temp = b*b - 4 * a*c;
		if (temp < 0)
			cout << "No Solution" << endl;
		else{
			double x1, x2;
			x1 = (double)(0 - b + sqrt(temp)) / (2 * a);
			x2 = (double)(0 - b - sqrt(temp)) / (2 * a);
			if (x1<x2)
				cout << fixed << setprecision(2) << x1 << " " << x2 << endl;
			else
				cout << fixed << setprecision(2) << x2 << " " << x1 << endl;
		}
	}
	return 0;
}