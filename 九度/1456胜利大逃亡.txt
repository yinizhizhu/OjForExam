#include <iostream>
#include <queue>

using namespace std;

const int N = 50;
bool mark[N][N][N];
int maze[N][N][N];
struct node {
	int x, y, z;
	int time;
	node(int a, int b, int c, int t) : x(a), y(b), z(c), time(t) {}
};
queue<node> Q;
int go[][3] = {1, 0, 0,	-1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1 };
int bfs(int a, int b, int c) {
	while (!Q.empty()) {
		node now = Q.front();
		Q.pop();
		for (int i = 0; i < 6; i++) {
			int x = now.x + go[i][0];
			int y = now.y + go[i][1];
			int z = now.z + go[i][2];
			if (x < 0 || x >= a || y < 0 || y >= b || z < 0 || z >= c) continue;
			if (maze[x][y][z] || mark[x][y][z]) continue;
			node tmp(x, y, z, now.time + 1);
			Q.push(tmp);
			mark[x][y][z] = true;
			if (x == a - 1 && y == b - 1 && z == c - 1)
				return tmp.time;
		}
	}
	return -1;
}

int main() {
	int t;
	cin >> t;
	for (; t; t--) {
		int a, b, c, time;
		cin >> a >> b >> c >> time;
		for (int i = 0; i < a; i++) {
			for (int j = 0; j < b; j++) {
				for (int k = 0; k < c; k++) {
					cin >> maze[i][j][k];
					mark[i][j][k] = false;
				}
			}
		}
		while (!Q.empty()) Q.pop();
		mark[0][0][0] = true;
		node tmp(0, 0, 0, 0);
		Q.push(tmp);
		int rec = bfs(a, b, c);
		if (rec <= time) cout << rec << endl;
		else cout << -1 << endl;
	}
	return 0;
}